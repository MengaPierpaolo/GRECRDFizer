package net.rhizomik.grecrdfizer;

import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;

import com.hp.hpl.jena.query.*;
import com.hp.hpl.jena.rdf.model.Model;
import com.hp.hpl.jena.vocabulary.DC_11;

/**
 * Utility class to query a SPARQL EndPoint containing publications generated by PubsRDFizer
 * 
 * @author http://rhizomik.net/~roberto
 */

public class PubsQuerier {
    
    private static final Logger log = Logger.getLogger(PubsQuerier.class.getName());

    private String graphURI;
    private String sparqlEndPointURL;

    public PubsQuerier(String sparqlEndPointURL, String graphURI) {
        this.sparqlEndPointURL = sparqlEndPointURL;
        this.graphURI = graphURI;        
    }

    public String query(String queryString) {
        ByteArrayOutputStream out = new ByteArrayOutputStream();
        String rdfxml = "";

        log.log(Level.INFO, queryString);
        Query query = QueryFactory.create(queryString, Syntax.syntaxARQ);
        
        QueryExecution qexec = QueryExecutionFactory.sparqlService(sparqlEndPointURL, query, graphURI);
        Model result = qexec.execDescribe();
        result.write(out, "RDF/XML-ABBREV");
        try {
            out.close();
            rdfxml = out.toString("UTF8");
        } catch (IOException e) {
            log.log(Level.SEVERE, queryString, e);
        }
        
        return rdfxml;
    }

    private String performDescribeQuery(String selectQuery) {
        String describeQuery =
                "DESCRIBE ?r           \n" +
                "WHERE { ?r a ?type {  \n" +
                "   "+selectQuery + " } }";
        return query(describeQuery);
    }

    public String articles(int limit) {
        return articles(0, limit);
    }

    public String articles(int offset, int limit) {
        String selectQuery =
                "SELECT ?r WHERE { ?r a <"+SWRC.Article+"> } \n"+
                "   LIMIT "+limit+" OFFSET "+offset;
        return performDescribeQuery(selectQuery);
    }

    private String byCreator(String authorURI, int limit) {
        return byCreator(authorURI, 0, limit);
    }

    private String byCreator(String authorURI, int offset, int limit) {
        String selectQuery =
                "SELECT ?r WHERE { ?r <"+ DC_11.creator+"> <"+authorURI+"> } \n"+
                "   LIMIT "+limit+" OFFSET "+offset;
        return performDescribeQuery(selectQuery);
    }

    public static void main(String[] args) {

        String sparqlEndPoint = "http://omediadis.udl.cat:8890/sparql";
        String graph = "http://griho.udl.cat/pubs/";

        PubsQuerier q = new PubsQuerier(sparqlEndPoint, graph);

        System.out.println("3 first articles:");
        System.out.println(q.articles(3));
        System.out.println();

        System.out.println("10th to 12th articles:");
        System.out.println(q.articles(10, 3));
        System.out.println();

        System.out.println("3 first Publications by R. Gil");
        System.out.println(q.byCreator("http://griho.udl.cat/person/GilR/", 3));
        System.out.println();
    }
}
