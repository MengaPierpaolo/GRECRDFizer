package net.rhizomik.grecrdfizer;

import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;

import com.hp.hpl.jena.query.*;
import com.hp.hpl.jena.rdf.model.Model;
import com.hp.hpl.jena.rdf.model.Property;
import com.hp.hpl.jena.vocabulary.DCTerms;
import com.hp.hpl.jena.vocabulary.DC_11;
import com.hp.hpl.jena.vocabulary.RDFS;

/**
 * Utility class to query a SPARQL EndPoint containing publications generated by PubsRDFizer
 *
 * @author http://rhizomik.net/~roberto
 */

public class PubsQuerier {

    private static final Logger log = Logger.getLogger(PubsQuerier.class.getName());

    private static final int RDF = 0;
    private static final int XML = 1;

    private static final String ASCENDING = "ASC";
    private static final String DESCENDING = "DESC";

    private String graphURI;
    private String sparqlEndPointURL;

    public PubsQuerier(String sparqlEndPointURL, String graphURI) {
        this.sparqlEndPointURL = sparqlEndPointURL;
        this.graphURI = graphURI;
    }

    public String query(String queryString, int typeOutput) {
        ByteArrayOutputStream out = new ByteArrayOutputStream();
        String rdfxml = "";

        log.log(Level.INFO, queryString);
        Query query = QueryFactory.create(queryString, Syntax.syntaxARQ);

        QueryExecution qexec = QueryExecutionFactory.sparqlService(sparqlEndPointURL, query, graphURI);
        switch (typeOutput) {
            case PubsQuerier.XML: //XML
                ResultSet result = qexec.execSelect();
                ResultSetFormatter.outputAsXML(out, result);
                break;
            default: // RDF
                Model modelResult = qexec.execDescribe();
                modelResult.write(out, "RDF/XML-ABBREV");
                break;
        }
        try {
            out.close();
            rdfxml = out.toString("UTF8");
        } catch (IOException e) {
            log.log(Level.SEVERE, queryString, e);
        }
        return rdfxml;
    }

    private String performDescribeQuery(String selectQuery) {
        String describeQuery =
                "DESCRIBE ?r           \n" +
                        "WHERE { ?r a ?type {  \n" +
                        "   "+selectQuery + " } }";
        return query(describeQuery, PubsQuerier.RDF);
    }
    private String performSelectQuery(String selectQuery) {
        String describeQuery =
                "DESCRIBE ?r           \n" +
                        "WHERE { ?r a ?type {  \n" +
                        "   "+selectQuery + " } }";
        return query(describeQuery, PubsQuerier.XML);
    }

    public String articles(int limit) {
        return articles(0, limit, DC_11.date, PubsQuerier.ASCENDING);
    }
    public String articles(int offset, int limit) {
        return articles(offset, limit, DC_11.date, PubsQuerier.ASCENDING);
    }
    public String articles(int limit, Property orderProperty, String direction) {
        return articles(0, limit, DC_11.date, direction);
    }
    public String articles(int offset, int limit, Property orderProperty, String direction) {
        String selectQuery =
                "SELECT ?r WHERE { ?r a <"+SWRC.Article+"> . \n"+
                        "   ?r <"+orderProperty+"> ?d } \n"+
                        "   ORDER BY "+direction+"(?d) \n"+
                        "   LIMIT "+limit+" OFFSET "+offset;
        return performDescribeQuery(selectQuery);
    }
    public String listArticles(int offset, int limit, String direction) {
        String selectQuery =
                "SELECT ?id ?authors ?title ?journal ?pages ?date \n"+
                        "WHERE { ?id a <"+SWRC.Article+"> .             \n"+
                        "   ?id <"+SWRC.authors+"> ?authors .           \n"+
                        "   ?id <"+DC_11.title+"> ?title .              \n"+
                        "   ?id <"+DCTerms.isPartOf+"> [ <"+RDFS.label+"> ?journal ] .     \n"+
                        "   ?id <"+SWRC.pages+"> ?pages .               \n"+
                        "   ?id <"+DC_11.date+"> ?date }                \n"+
                        "   ORDER BY "+direction+"(?date)               \n"+
                        "   LIMIT "+limit+" OFFSET "+offset;
        return performSelectQuery(selectQuery);
    }

    public String byCreator(String authorURI, int limit) {
        return byCreator(authorURI, 0, limit, DC_11.date, PubsQuerier.ASCENDING);
    }
    public String byCreator(String authorURI, int offset, int limit) {
        return byCreator(authorURI, offset, limit, DC_11.date, PubsQuerier.ASCENDING);
    }
    public String byCreator(String authorURI, int limit, String direction) {
        return byCreator(authorURI, 0, limit, DC_11.date, direction);
    }
    public String byCreator(String authorURI, int limit, Property orderProperty, String direction) {
        return byCreator(authorURI, 0, limit, orderProperty, direction);
    }
    public String byCreator(String authorURI, int offset, int limit, String direction) {
        return byCreator(authorURI, offset, limit, DC_11.date, direction);
    }
    public String byCreator(String authorURI, int offset, int limit, Property orderProperty, String direction) {
        String selectQuery =
                "SELECT ?r WHERE { ?r <"+ DC_11.creator+"> <"+authorURI+"> } \n"+
                        "   ?r <"+orderProperty+"> ?d } \n"+
                        "   ORDER BY "+direction+"(?d) \n"+
                        "   LIMIT "+limit+" OFFSET "+offset;
        return performDescribeQuery(selectQuery);
    }

    public static void main(String[] args) {

        String sparqlEndPoint = "http://omediadis.udl.cat:8890/sparql";
        String graph = "http://griho.udl.cat/pubs/";

        PubsQuerier q = new PubsQuerier(sparqlEndPoint, graph);

        System.out.println("3 first articles:");
        System.out.println(q.articles(3));
        System.out.println();

        System.out.println("10th to 12th articles:");
        System.out.println(q.articles(10, 3));
        System.out.println();

        System.out.println("3 first Publications by R. Gil");
        System.out.println(q.byCreator("http://griho.udl.cat/person/GilR/", 3));
        System.out.println();

        System.out.println("10 oldest articles");
        System.out.println(q.articles(0, 10, DC_11.date, PubsQuerier.ASCENDING));
        System.out.println();

        System.out.println("List 10 oldest articles");
        System.out.println(q.listArticles(0, 10, PubsQuerier.ASCENDING));
        System.out.println();
    }
}